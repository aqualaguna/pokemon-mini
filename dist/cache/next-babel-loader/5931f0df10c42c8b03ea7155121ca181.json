{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// @flow\nimport React from \"react\";\n\nvar ImageLoader = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ImageLoader, _React$PureComponent);\n\n  var _super = _createSuper(ImageLoader);\n\n  function ImageLoader() {\n    var _this;\n\n    _classCallCheck(this, ImageLoader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      isLoading: true,\n      isError: false,\n      src: null,\n      width: null,\n      height: null,\n      errMsg: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"reload\", function (props) {\n      // initialize\n      _this.setState({\n        isLoading: true,\n        isError: false,\n        src: null,\n        errMsg: null\n      });\n\n      var image = new Image();\n      image.src = props.src;\n\n      image.onload = function () {\n        _this.setState({\n          src: image.src,\n          width: image.width,\n          height: image.height,\n          isLoading: false,\n          isError: false,\n          errMsg: null\n        });\n\n        if (props.onLoad) {\n          props.onLoad(image);\n        }\n      };\n\n      image.onerror = function (err) {\n        _this.setState({\n          src: null,\n          width: null,\n          height: null,\n          isLoading: false,\n          isError: true,\n          errMsg: err\n        });\n\n        if (props.onError) {\n          // @ts-ignore\n          props.onError(err);\n        }\n      };\n    });\n\n    return _this;\n  }\n\n  _createClass(ImageLoader, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      // reload only when image src is changed.\n      if (this.props.src !== nextProps.src) this.reload(nextProps);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.reload(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          loading = _this$props.loading,\n          error = _this$props.error,\n          image = _this$props.image,\n          style = _this$props.style,\n          className = _this$props.className,\n          alt = _this$props.alt;\n      var _this$state = this.state,\n          src = _this$state.src,\n          width = _this$state.width,\n          height = _this$state.height,\n          isLoading = _this$state.isLoading,\n          isError = _this$state.isError,\n          errMsg = _this$state.errMsg;\n\n      if (loading && isLoading) {\n        return loading();\n      } else if (error && isError && errMsg) {\n        return error(errMsg);\n      } else if (src && image) {\n        return image({\n          src: src,\n          width: width,\n          height: height\n        });\n      } else if (src) {\n        return /*#__PURE__*/_jsx(\"img\", {\n          alt: alt || \"none\",\n          src: src,\n          style: style,\n          className: className,\n          width: width,\n          height: height\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return ImageLoader;\n}(React.PureComponent);\n\nexport { ImageLoader as default };","map":null,"metadata":{},"sourceType":"module"}