{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @flow\nimport React from \"react\";\nexport default class ImageLoader extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLoading: true,\n      isError: false,\n      src: null,\n      width: null,\n      height: null,\n      errMsg: null\n    });\n\n    _defineProperty(this, \"reload\", props => {\n      // initialize\n      this.setState({\n        isLoading: true,\n        isError: false,\n        src: null,\n        errMsg: null\n      });\n      const image = new Image();\n      image.src = props.src;\n\n      image.onload = () => {\n        this.setState({\n          src: image.src,\n          width: image.width,\n          height: image.height,\n          isLoading: false,\n          isError: false,\n          errMsg: null\n        });\n\n        if (props.onLoad) {\n          props.onLoad(image);\n        }\n      };\n\n      image.onerror = err => {\n        this.setState({\n          src: null,\n          width: null,\n          height: null,\n          isLoading: false,\n          isError: true,\n          errMsg: err\n        });\n\n        if (props.onError) {\n          // @ts-ignore\n          props.onError(err);\n        }\n      };\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // reload only when image src is changed.\n    if (this.props.src !== nextProps.src) this.reload(nextProps);\n  }\n\n  componentDidMount() {\n    this.reload(this.props);\n  }\n\n  render() {\n    const {\n      loading,\n      error,\n      image,\n      style,\n      className,\n      alt\n    } = this.props;\n    const {\n      src,\n      width,\n      height,\n      isLoading,\n      isError,\n      errMsg\n    } = this.state;\n\n    if (loading && isLoading) {\n      return loading();\n    } else if (error && isError && errMsg) {\n      return error(errMsg);\n    } else if (src && image) {\n      return image({\n        src,\n        width,\n        height\n      });\n    } else if (src) {\n      return /*#__PURE__*/_jsx(\"img\", {\n        alt: alt || \"none\",\n        src: src,\n        style: style,\n        className: className,\n        width: width,\n        height: height\n      });\n    }\n\n    return null;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}